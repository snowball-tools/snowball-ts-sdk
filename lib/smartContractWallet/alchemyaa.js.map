{"version":3,"file":"alchemyaa.js","sourceRoot":"","sources":["../../src/smartContractWallet/alchemyaa.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAE9C,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAE3C,yCAAyC;AAEzC,MAAM,OAAO,SAAU,SAAQ,eAAe;IAQ5C,YACE,IAAkB,EAClB,MAAc,EACd,WAA+B;QAE/B,KAAK,CAAC;YACJ,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;YAC5B,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB;YAC/C,MAAM,EAAE,MAAM;SACf,CAAC,CAAC;QAhBE;;;;;WAAmB;QAC1B,mEAAmE;QACnE,wCAAwC;QACxC,0BAA0B;QAC1B,4BAA4B;QACpB;;;;;WAAgC;QAYtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,wBAAwB;QACxB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAE/B,+BAA+B;QAC/B,oBAAoB;QACpB,iDAAiD;QACjD,MAAM;IACR,CAAC;IAED,KAAK,CAAC,UAAU,CACd,aAAsB,EACtB,IAAS,EACT,UAAmB;QAEnB,IAAI;YACF,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,UAAU,EAAE;gBAChD,IAAI,CAAC,qBAAqB,CAAC;oBACzB,QAAQ,EAAE,IAAI,CAAC,WAAW;oBAC1B,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB;iBAC9C,CAAC,CAAC;aACJ;YAED,MAAM,MAAM,GAA4B,MAAM,IAAI,CAAC,iBAAiB,CAAC;gBACnE,MAAM,EAAE,aAAa;gBACrB,IAAI,EAAE,IAAI;aACX,CAAC,CAAC;YAEH,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;gBACrD,OAAO,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;aAC7C;YAED,mBAAmB;YACnB,MAAM,KAAK,CACT,IAAI,CAAC,+BAA+B,EACpC,CAAC,MAAM,CAAC,IAAe,CAAC,EACxB,EAAE,CACH,CAAC;YAEF,IAAI,aAAa,GAAG,MAAM,KAAK,CAC7B,IAAI,CAAC,uBAAuB,EAC5B,CAAC,MAAM,CAAC,IAAe,CAAC,EACxB,EAAE,CACH,CAAC;YAEF,IAAI,aAAa,KAAK,IAAI,EAAE;gBAC1B,OAAO,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;aAC7C;YAED,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,OAAO,CAAC,MAAM,CAAC,sBAAsB,KAAK,EAAE,CAAC,CAAC;SACtD;IACH,CAAC;CACF","sourcesContent":["import { viemChain } from \"../helpers/chains\";\nimport type { Address, SendUserOperationResult, Hex } from \"@alchemy/aa-core\";\nimport { AlchemyProvider } from \"@alchemy/aa-alchemy\";\nimport { retry } from \"../helpers/promise\";\nimport type { SnowballAuth, SnowballSmartWallet } from \"../snowball\";\n// import { Alchemy } from \"alchemy-sdk\";\n\nexport class AlchemyAA extends AlchemyProvider implements SnowballSmartWallet {\n  public auth: SnowballAuth;\n  // private simpleAccountOwner: SimpleSmartAccountOwner | undefined;\n  // private address: Address | undefined;\n  // private apiKey: string;\n  // private alchemy: Alchemy;\n  private gasPolicyId: string | undefined;\n\n  constructor(\n    auth: SnowballAuth,\n    apiKey: string,\n    gasPolicyId: string | undefined\n  ) {\n    super({\n      chain: viemChain(auth.chain),\n      entryPointAddress: auth.chain.entryPointAddress,\n      apiKey: apiKey,\n    });\n    this.auth = auth;\n    // this.apiKey = apiKey;\n    this.gasPolicyId = gasPolicyId;\n\n    // this.alchemy = new Alchemy({\n    //   apiKey: apiKey,\n    //   network: getAlchemyNetwork(this.auth.chain),\n    // });\n  }\n\n  async sendUserOp(\n    targetAddress: Address,\n    data: Hex,\n    sponsorGas: Boolean\n  ): Promise<SendUserOperationResult> {\n    try {\n      if (this.gasPolicyId !== undefined && sponsorGas) {\n        this.withAlchemyGasManager({\n          policyId: this.gasPolicyId,\n          entryPoint: this.auth.chain.entryPointAddress,\n        });\n      }\n\n      const result: SendUserOperationResult = await this.sendUserOperation({\n        target: targetAddress,\n        data: data,\n      });\n\n      if (result === undefined || result.hash === undefined) {\n        return Promise.reject(\"Transaction failed\");\n      }\n\n      // wait for user op\n      await retry(\n        this.waitForUserOperationTransaction,\n        [result.hash as Address],\n        10\n      );\n\n      let userOpReceipt = await retry(\n        this.getUserOperationReceipt,\n        [result.hash as Address],\n        10\n      );\n\n      if (userOpReceipt === null) {\n        return Promise.reject(\"Transaction failed\");\n      }\n\n      return result;\n    } catch (error) {\n      return Promise.reject(`Transaction failed ${error}`);\n    }\n  }\n}\n"]}