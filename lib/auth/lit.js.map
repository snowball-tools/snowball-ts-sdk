{"version":3,"file":"lit.js","sourceRoot":"","sources":["../../src/auth/lit.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitAuthClient, WebAuthnProvider } from \"@lit-protocol/lit-auth-client\";\nimport { ProviderType } from \"@lit-protocol/constants\";\nimport { LitNodeClient } from \"@lit-protocol/lit-node-client\";\nimport type {\n  AuthMethod,\n  AuthCallbackParams,\n  IRelayPKP,\n  SessionSigsMap,\n} from \"@lit-protocol/types\";\nimport { LitAbility, LitActionResource } from \"@lit-protocol/auth-helpers\";\nimport { PKPEthersWallet } from \"@lit-protocol/pkp-ethers\";\nimport type {\n  SimpleSmartAccountOwner,\n  Address,\n  SignTypedDataParams,\n} from \"@alchemy/aa-core\";\nimport type { TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { DEFAULT_EXP } from \"../helpers/constants\";\nimport type { Chain } from \"../helpers/chains\";\nimport { Passkey } from \"./passkey\";\n\nexport class LitAuth extends Passkey {\n  litAuthClient: LitAuthClient;\n  webAuthnProvider: WebAuthnProvider;\n  litNodeClient: LitNodeClient;\n\n  private authenticated: AuthMethod | undefined;\n  private pkpPublicKey: string | undefined;\n  private pkpEthAddress: string | undefined;\n  private sessionSig: SessionSigsMap | undefined;\n  private pkpWallet: PKPEthersWallet | undefined;\n\n  // to do: get setter\n  public simpleAccountOwner: SimpleSmartAccountOwner | undefined;\n\n  constructor(apiKey: string, chain: Chain) {\n    super(chain);\n    this.litAuthClient = new LitAuthClient({\n      litRelayConfig: {\n        relayApiKey: apiKey,\n      },\n    });\n\n    this.litAuthClient.initProvider(ProviderType.WebAuthn);\n\n    this.webAuthnProvider = this.litAuthClient.getProvider(\n      ProviderType.WebAuthn\n    ) as WebAuthnProvider;\n\n    this.litNodeClient = new LitNodeClient({\n      litNetwork: \"serrano\",\n      debug: false,\n    });\n  }\n\n  async registerPasskey(username: string): Promise<void> {\n    try {\n      const options = await this.webAuthnProvider.register(username);\n      const txHash = await this.webAuthnProvider.verifyAndMintPKPThroughRelayer(\n        options\n      );\n\n      await this.webAuthnProvider.relay\n        .pollRequestUntilTerminalState(txHash)\n        .catch((error) => {\n          return Promise.reject(\n            `pollRequestUntilTerminalState failed ${error}`\n          );\n        })\n        .then((response) => {\n          if (\n            response.pkpEthAddress === undefined ||\n            response.pkpPublicKey === undefined\n          ) {\n            return Promise.reject(\n              `pollRequestUntilTerminalState failed ${response}`\n            );\n          }\n\n          this.pkpPublicKey = response.pkpPublicKey;\n          this.pkpEthAddress = response.pkpEthAddress;\n\n          return response;\n        });\n\n      return Promise.resolve();\n    } catch (error) {\n      return Promise.reject(`registerPasskey failed: ${error}`);\n    }\n  }\n\n  async authenticatePasskey(): Promise<void> {\n    try {\n      this.authenticated = await this.webAuthnProvider.authenticate();\n      return Promise.resolve();\n    } catch (error) {\n      return Promise.reject(`Authentication failed ${error}`);\n    }\n  }\n\n  async fetchPkpsForAuthMethod(): Promise<IRelayPKP[]> {\n    try {\n      if (this.authenticated === undefined) {\n        await this.authenticatePasskey();\n      }\n\n      if (this.authenticated === undefined) {\n        return Promise.reject(\"No auth method found\");\n      }\n\n      const pkps = await this.webAuthnProvider.fetchPKPsThroughRelayer(\n        this.authenticated\n      );\n\n      if (pkps.length === 0) {\n        return Promise.reject(\"No PKPs found\");\n      }\n      return pkps;\n    } catch (error) {\n      return Promise.reject(`Retrieving PKPs failed ${error}`);\n    }\n  }\n\n  async getSessionSigs(): Promise<Boolean> {\n    try {\n      if (this.authenticated === undefined) {\n        await this.authenticatePasskey();\n      }\n\n      if (this.authenticated === undefined) {\n        return Promise.reject(\"No auth method found\");\n      }\n\n      if (this.pkpPublicKey === undefined) {\n        await this.fetchPkpsForAuthMethod();\n      }\n\n      if (this.pkpPublicKey === undefined) {\n        return Promise.reject(\"No PKPs found\");\n      }\n\n      await this.litNodeClient.connect();\n\n      const authNeededCallback = async (params: AuthCallbackParams) => {\n        const resp = await this.litNodeClient.signSessionKey({\n          statement: params.statement,\n          authMethods: [this.authenticated!],\n          pkpPublicKey: this.pkpPublicKey,\n          expiration: params.expiration,\n          resources: params.resources,\n          chainId: this.chain.chainId,\n        });\n        return resp.authSig;\n      };\n\n      const sessionSigs = await this.litNodeClient.getSessionSigs({\n        expiration: DEFAULT_EXP,\n        chain: this.chain.name,\n        resourceAbilityRequests: [\n          {\n            resource: new LitActionResource(\"*\"),\n            ability: LitAbility.PKPSigning,\n          },\n        ],\n        switchChain: false,\n        authNeededCallback: authNeededCallback,\n      });\n\n      if (sessionSigs === undefined) {\n        return Promise.reject(\"Retrieving session sigs failed. undefined\");\n      }\n\n      this.sessionSig = sessionSigs;\n      return true;\n    } catch (error) {\n      return Promise.reject(`Retrieving session sigs failed ${error}`);\n    }\n  }\n\n  async createPkpEthersWallet(): Promise<Boolean> {\n    if (this.authenticated === undefined) {\n      await this.authenticatePasskey().catch((error) => {\n        return Promise.reject(`Transaction failed ${error}`);\n      });\n    }\n\n    if (this.pkpPublicKey === undefined) {\n      await this.fetchPkpsForAuthMethod().catch((error) => {\n        return Promise.reject(`Transaction failed ${error}`);\n      });\n    }\n\n    if (this.sessionSig === undefined) {\n      await this.getSessionSigs().catch((error) => {\n        return Promise.reject(`Transaction failed ${error}`);\n      });\n    }\n\n    try {\n      const pkpWallet = new PKPEthersWallet({\n        controllerSessionSigs: this.sessionSig,\n        pkpPubKey: this.pkpPublicKey!,\n        rpc: \"https://chain-rpc.litprotocol.com/http\",\n      });\n      await pkpWallet.init();\n\n      if (pkpWallet === undefined) {\n        return Promise.reject(\"Transaction failed. pkpWallet undefined\");\n      }\n\n      this.pkpWallet = pkpWallet;\n\n      return true;\n    } catch (error) {\n      return Promise.reject(`Transaction failed ${error}`);\n    }\n  }\n\n  async getSimpleAccountOwner(): Promise<SimpleSmartAccountOwner> {\n    if (this.simpleAccountOwner) {\n      return this.simpleAccountOwner;\n    }\n\n    try {\n      if (this.pkpWallet === undefined) {\n        await this.createPkpEthersWallet().catch((error) => {\n          return Promise.reject(`Transaction failed ${error}`);\n        });\n      }\n\n      const owner: SimpleSmartAccountOwner = {\n        signMessage: async (msg: Uint8Array) => {\n          return (await this.pkpWallet!.signMessage(msg)) as Address;\n        },\n        getAddress: async () => {\n          return (await this.pkpWallet!.getAddress()) as Address;\n        },\n        signTypedData: async (params: SignTypedDataParams) => {\n          const types: Record<string, Array<TypedDataField>> = {\n            [params.primaryType]: params.types[\"x\"].map(\n              (value) =>\n                ({\n                  name: value.name,\n                  type: value.type,\n                } as TypedDataField)\n            ),\n          };\n\n          return (await this.pkpWallet!._signTypedData(\n            params.domain ? params.domain : {},\n            types,\n            params.message\n          )) as Address;\n        },\n      };\n\n      this.simpleAccountOwner = owner;\n      return owner;\n    } catch (error) {\n      return Promise.reject(`Get Simple Account Owner failed ${error}`);\n    }\n  }\n}\n"]}