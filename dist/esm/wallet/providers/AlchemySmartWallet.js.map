{"version":3,"file":"AlchemySmartWallet.js","sourceRoot":"","sources":["../../../../src/wallet/providers/AlchemySmartWallet.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type Address,\n  type SendUserOperationResult,\n  type Hex,\n  type SimpleSmartAccountOwner,\n  SimpleSmartContractAccount,\n} from \"@alchemy/aa-core\";\nimport { retry } from \"../../helpers/promise\";\nimport { AlchemyProvider } from \"@alchemy/aa-alchemy\";\nimport type { SmartWalletProviderInfo } from \"../../helpers/constants\";\nimport type { SnowballSmartWalletProvider } from \"./types\";\nimport { Chain } from \"../../helpers\";\nimport { getAlchemyChain } from \"../../helpers/chains\";\n\nexport class AlchemySmartWallet implements SnowballSmartWalletProvider {\n  private provider: AlchemyProvider;\n  chain: Chain;\n  smartWalletProviderInfo: SmartWalletProviderInfo;\n  simpleAccountOwner: SimpleSmartAccountOwner;\n\n  constructor(\n    simpleAccountOwner: SimpleSmartAccountOwner,\n    smartWalletProviderInfo: SmartWalletProviderInfo,\n    chain: Chain\n  ) {\n    this.chain = chain;\n    this.smartWalletProviderInfo = smartWalletProviderInfo;\n    this.simpleAccountOwner = simpleAccountOwner;\n\n    this.provider = this.initAlchemyProvider();\n  }\n\n  changeChain(chain: Chain) {\n    this.chain = chain;\n    this.provider = this.initAlchemyProvider();\n  }\n\n  async sendUserOperation(\n    targetAddress: Address,\n    data: Hex,\n    sponsorGas: Boolean\n  ): Promise<SendUserOperationResult> {\n    try {\n      const gasPolicyId =\n        this.smartWalletProviderInfo.apiKeys[\n          `alchemyKey-${this.chain.name.toLowerCase()}-gasPolicyId`\n        ];\n      if (gasPolicyId && sponsorGas) {\n        this.provider = this.provider.withAlchemyGasManager({\n          policyId: gasPolicyId,\n          entryPoint: this.chain.entryPointAddress,\n        });\n      }\n\n      const result: SendUserOperationResult =\n        await this.provider.sendUserOperation({\n          target: targetAddress,\n          data: data,\n        });\n\n      if (result === undefined || result.hash === undefined) {\n        return Promise.reject(\"Transaction failed\");\n      }\n\n      // wait for user op\n      await retry(\n        this.provider.waitForUserOperationTransaction,\n        [result.hash as Address],\n        10\n      );\n\n      let userOpReceipt = await retry(\n        this.provider.getUserOperationReceipt,\n        [result.hash as Address],\n        10\n      );\n\n      if (userOpReceipt === null) {\n        return Promise.reject(\"Transaction failed\");\n      }\n\n      return result;\n    } catch (error) {\n      return Promise.reject(`Transaction failed ${JSON.stringify(error)}`);\n    }\n  }\n\n  private initAlchemyProvider(): AlchemyProvider {\n    this.provider = new AlchemyProvider({\n      chain: this.chain.chainId,\n      entryPointAddress: this.chain.entryPointAddress,\n      apiKey:\n        this.smartWalletProviderInfo.apiKeys[\n          `alchemyKey-${this.chain.name.toLowerCase()}`\n        ],\n    }).connect(\n      (rpcClient) =>\n        new SimpleSmartContractAccount({\n          owner: this.simpleAccountOwner,\n          entryPointAddress: this.chain.entryPointAddress,\n          chain: getAlchemyChain(this.chain),\n          factoryAddress: this.chain.factoryAddress,\n          rpcClient,\n        })\n    );\n    return this.provider;\n  }\n}\n"]}