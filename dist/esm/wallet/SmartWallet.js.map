{"version":3,"file":"SmartWallet.js","sourceRoot":"","sources":["../../../src/wallet/SmartWallet.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type Address,\n  type SignTypedDataParams,\n  type SimpleSmartAccountOwner,\n} from \"@alchemy/aa-core\";\nimport type { TypedDataField } from \"ethers\";\nimport { AlchemySmartWallet } from \"./providers/AlchemySmartWallet\";\nimport type { PKPEthersWallet } from \"@lit-protocol/pkp-ethers\";\nimport type { SnowballAuth, SnowballSmartWallet } from \"../snowball\";\nimport { SmartWalletProvider, type SmartWalletProviderInfo } from \"../helpers\";\nimport type { SnowballSmartWalletProvider } from \"./providers\";\n\nexport class SmartWallet implements SnowballSmartWallet {\n  smartWalletProvider: SnowballSmartWalletProvider | undefined;\n  ethersWallet: PKPEthersWallet | undefined;\n  auth: SnowballAuth;\n  simpleAccountOwner: SimpleSmartAccountOwner | undefined;\n  address: Address | undefined;\n  smartWalletProviderInfo: SmartWalletProviderInfo;\n\n  constructor(\n    ethersWallet: PKPEthersWallet,\n    auth: SnowballAuth,\n    smartWalletProviderInfo: SmartWalletProviderInfo\n  ) {\n    this.auth = auth;\n    this.smartWalletProviderInfo = smartWalletProviderInfo;\n    this.ethersWallet = ethersWallet;\n\n    this.getSimpleAccountOwner()\n      .then((owner) => {\n        this.simpleAccountOwner = owner;\n\n        owner\n          .getAddress()\n          .catch((error) => {\n            console.log(error);\n          })\n          .then(() => {\n            this.smartWalletProvider = this.initSmartWalletProvider(owner);\n          });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  async getSimpleAccountOwner(): Promise<SimpleSmartAccountOwner> {\n    if (this.simpleAccountOwner) {\n      return this.simpleAccountOwner;\n    }\n\n    try {\n      const owner: SimpleSmartAccountOwner = {\n        signMessage: async (msg: Uint8Array) => {\n          return (await this.ethersWallet!.signMessage(msg)) as Address;\n        },\n        getAddress: async () => {\n          return (await this.ethersWallet!.getAddress()) as Address;\n        },\n        signTypedData: async (params: SignTypedDataParams) => {\n          const types: Record<string, Array<TypedDataField>> = {\n            [params.primaryType]: params.types[\"x\"].map(\n              (value) =>\n                ({\n                  name: value.name,\n                  type: value.type,\n                } as TypedDataField)\n            ),\n          };\n\n          return (await this.ethersWallet!._signTypedData(\n            params.domain ? params.domain : {},\n            types,\n            params.message\n          )) as Address;\n        },\n      };\n\n      this.simpleAccountOwner = owner;\n\n      return owner;\n    } catch (error) {\n      return Promise.reject(`Get Simple Account Owner failed ${error}`);\n    }\n  }\n\n  async getAddress(): Promise<Address> {\n    if (this.address) {\n      return this.address;\n    }\n\n    try {\n      const owner = await this.getSimpleAccountOwner();\n      this.address = await owner.getAddress();\n      return this.address;\n    } catch (e) {\n      throw new Error(\"Error getting address\");\n    }\n  }\n\n  async sendUserOperation(\n    targetAddress: Address,\n    data: Address,\n    sponsorGas: Boolean\n  ): Promise<{\n    hash: string;\n  }> {\n    switch (this.smartWalletProviderInfo.name) {\n      case SmartWalletProvider.alchemy:\n        return this.sendUserOperation(targetAddress, data, sponsorGas);\n      case SmartWalletProvider.fun:\n      default:\n        throw new Error(\"Auth Provider has not been impl yet\");\n    }\n  }\n\n  initSmartWalletProvider(\n    simpleAccountOwner: SimpleSmartAccountOwner\n  ): SnowballSmartWalletProvider {\n    switch (this.smartWalletProviderInfo.name) {\n      case SmartWalletProvider.alchemy:\n        return new AlchemySmartWallet(\n          simpleAccountOwner,\n          this.smartWalletProviderInfo,\n          this.auth.chain\n        );\n      case SmartWalletProvider.fun:\n      default:\n        throw new Error(\"Auth Provider has not been impl yet\");\n    }\n  }\n}\n"]}