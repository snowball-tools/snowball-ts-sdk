{"version":3,"file":"AlchemyAA.js","sourceRoot":"","sources":["../../src/SmartContractWallet/AlchemyAA.ts"],"names":[],"mappings":"AAAA,OAAO,EAKL,wBAAwB,GAYzB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAI3C,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAG5D,MAAM,OAAO,SAAU,SAAQ,mBAAmB;IACxC,WAAW,CAAqB;IAExC,YACE,IAAkB,EAClB,kBAA2C,EAC3C,UAAsB;QAEtB,KAAK,CAAC,IAAI,EAAE,kBAAkB,EAAE,UAAU,CAAC,CAAC;QAC5C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW;YACd,IAAI,CAAC,UAAU,CAAC,OAAO,CACrB,cAAc,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAC1D,CAAC;QACJ,OAAO,CAAC,GAAG,CACT,IAAI,CAAC,UAAU,CAAC,OAAO,CACrB,cAAc,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAC1D,CACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,UAAU,CACd,aAAsB,EACtB,IAAS,EACT,UAAmB;QAEnB,IAAI;YACF,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,UAAU,EAAE;gBAChD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;oBAClD,QAAQ,EAAE,IAAI,CAAC,WAAW;oBAC1B,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB;iBAC9C,CAAC,CAAC;aACJ;YAED,MAAM,MAAM,GACV,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC;gBACpC,MAAM,EAAE,aAAa;gBACrB,IAAI,EAAE,IAAI;aACX,CAAC,CAAC;YAEL,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;gBACrD,OAAO,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;aAC7C;YAED,mBAAmB;YACnB,MAAM,KAAK,CACT,IAAI,CAAC,QAAQ,CAAC,+BAA+B,EAC7C,CAAC,MAAM,CAAC,IAAe,CAAC,EACxB,EAAE,CACH,CAAC;YAEF,IAAI,aAAa,GAAG,MAAM,KAAK,CAC7B,IAAI,CAAC,QAAQ,CAAC,uBAAuB,EACrC,CAAC,MAAM,CAAC,IAAe,CAAC,EACxB,EAAE,CACH,CAAC;YAEF,IAAI,aAAa,KAAK,IAAI,EAAE;gBAC1B,OAAO,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;aAC7C;YAED,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,OAAO,CAAC,MAAM,CAAC,sBAAsB,KAAK,EAAE,CAAC,CAAC;SACtD;IACH,CAAC;CACF","sourcesContent":["import {\n  type Address,\n  type SendUserOperationResult,\n  type Hex,\n  type SimpleSmartAccountOwner,\n  BaseSmartContractAccount,\n  type BatchUserOperationCallData,\n  type FeeDataMiddleware,\n  type GasEstimatorMiddleware,\n  type PaymasterAndDataMiddleware,\n  type SignTypedDataParams,\n  type UserOperationCallData,\n  type UserOperationReceipt,\n  type UserOperationResponse,\n  type UserOperationStruct,\n  type AccountMiddlewareFn,\n  type PublicErc4337Client,\n} from \"@alchemy/aa-core\";\nimport { retry } from \"../helpers/promise\";\nimport type { SnowballAuth } from \"../main/Snowball\";\nimport type { Transport, RpcTransactionRequest } from \"viem\";\nimport type { SignTypedDataParameters } from \"viem/accounts\";\nimport { SmartContractWallet } from \"./SmartContractWallet\";\nimport type { AAProvider } from \"../helpers/constants\";\n\nexport class AlchemyAA extends SmartContractWallet {\n  private gasPolicyId: string | undefined;\n\n  constructor(\n    auth: SnowballAuth,\n    simpleAccountOwner: SimpleSmartAccountOwner,\n    aaProvider: AAProvider\n  ) {\n    super(auth, simpleAccountOwner, aaProvider);\n    this.auth = auth;\n    this.gasPolicyId =\n      this.aaProvider.apiKeys[\n        `alchemyKey-${auth.chain.name.toLowerCase()}-gasPolicyId`\n      ];\n    console.log(\n      this.aaProvider.apiKeys[\n        `alchemyKey-${auth.chain.name.toLowerCase()}-gasPolicyId`\n      ]\n    );\n  }\n\n  async sendUserOp(\n    targetAddress: Address,\n    data: Hex,\n    sponsorGas: Boolean\n  ): Promise<SendUserOperationResult> {\n    try {\n      if (this.gasPolicyId !== undefined && sponsorGas) {\n        this.provider = this.provider.withAlchemyGasManager({\n          policyId: this.gasPolicyId,\n          entryPoint: this.auth.chain.entryPointAddress,\n        });\n      }\n\n      const result: SendUserOperationResult =\n        await this.provider.sendUserOperation({\n          target: targetAddress,\n          data: data,\n        });\n\n      if (result === undefined || result.hash === undefined) {\n        return Promise.reject(\"Transaction failed\");\n      }\n\n      // wait for user op\n      await retry(\n        this.provider.waitForUserOperationTransaction,\n        [result.hash as Address],\n        10\n      );\n\n      let userOpReceipt = await retry(\n        this.provider.getUserOperationReceipt,\n        [result.hash as Address],\n        10\n      );\n\n      if (userOpReceipt === null) {\n        return Promise.reject(\"Transaction failed\");\n      }\n\n      return result;\n    } catch (error) {\n      return Promise.reject(`Transaction failed ${error}`);\n    }\n  }\n}\n"]}