{"version":3,"file":"SmartContractWallet.js","sourceRoot":"","sources":["../../src/SmartContractWallet/SmartContractWallet.ts"],"names":[],"mappings":"AAAA,OAAO,EAeL,0BAA0B,GAC3B,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAGtD,OAAO,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAC;AAC5C,OAAO,EACL,SAAS,GAIV,MAAM,IAAI,CAAC;AAEZ,MAAM,OAAO,mBAAmB;IAC9B,IAAI,CAAe;IACnB,QAAQ,CAAkB;IAC1B,kBAAkB,CAAsC;IACxD,OAAO,CAAsB;IAC7B,UAAU,CAAa;IAEvB,YACE,IAAkB,EAClB,kBAA2C,EAC3C,UAAsB;QAEtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,IAAI,CAAC,QAAQ,GAAG,IAAI,eAAe,CAAC;YAClC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;YAC5B,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB;YAC/C,MAAM,EAAE,UAAU,CAAC,OAAO,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;SAC1E,CAAC,CAAC,OAAO,CACR,CAAC,SAAS,EAAE,EAAE,CACZ,IAAI,0BAA0B,CAAC;YAC7B,KAAK,EAAE,kBAAkB;YACzB,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB;YACpD,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;YACjC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc;YAC9C,SAAS;SACV,CAAC,CACL,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,UAAU;QACd,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;YAC9B,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;QACD,IAAI;YACF,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;YAChD,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;IACH,CAAC;IAED,KAAK,CAAC,UAAU,CACd,aAAsB,EACtB,IAAa,EACb,UAAmB;QAEnB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["import {\n  type SendUserOperationResult,\n  type AccountMiddlewareFn,\n  type BaseSmartContractAccount,\n  type UserOperationCallData,\n  type BatchUserOperationCallData,\n  type UserOperationStruct,\n  type UserOperationResponse,\n  type UserOperationReceipt,\n  type SignTypedDataParams,\n  type PaymasterAndDataMiddleware,\n  type GasEstimatorMiddleware,\n  type FeeDataMiddleware,\n  type PublicErc4337Client,\n  type SimpleSmartAccountOwner,\n  SimpleSmartContractAccount,\n} from \"@alchemy/aa-core\";\nimport { AlchemyProvider } from \"@alchemy/aa-alchemy\";\nimport type { Transport, RpcTransactionRequest, Address } from \"viem\";\nimport type { SignTypedDataParameters } from \"viem/accounts\";\nimport { Auth } from \"../helpers/constants\";\nimport {\n  viemChain,\n  type SnowballAuth,\n  type SnowballSmartWallet,\n  type AAProvider,\n} from \"..\";\n\nexport class SmartContractWallet implements SnowballSmartWallet {\n  auth: SnowballAuth;\n  provider: AlchemyProvider;\n  simpleAccountOwner: SimpleSmartAccountOwner | undefined;\n  address: Address | undefined;\n  aaProvider: AAProvider;\n\n  constructor(\n    auth: SnowballAuth,\n    simpleAccountOwner: SimpleSmartAccountOwner,\n    aaProvider: AAProvider\n  ) {\n    this.auth = auth;\n    this.simpleAccountOwner = simpleAccountOwner;\n    this.aaProvider = aaProvider;\n\n    this.provider = new AlchemyProvider({\n      chain: viemChain(auth.chain),\n      entryPointAddress: auth.chain.entryPointAddress,\n      apiKey: aaProvider.apiKeys[`alchemyKey-${auth.chain.name.toLowerCase()}`],\n    }).connect(\n      (rpcClient) =>\n        new SimpleSmartContractAccount({\n          owner: simpleAccountOwner,\n          entryPointAddress: this.auth.chain.entryPointAddress,\n          chain: viemChain(this.auth.chain),\n          factoryAddress: this.auth.chain.factoryAddress,\n          rpcClient,\n        })\n    );\n  }\n\n  async getAddress(): Promise<Address> {\n    if (this.address !== undefined) {\n      return this.address;\n    }\n    try {\n      this.address = await this.provider.getAddress();\n      return this.address;\n    } catch (e) {\n      throw new Error(\"Error getting address\");\n    }\n  }\n\n  async sendUserOp(\n    targetAddress: Address,\n    data: Address,\n    sponsorGas: Boolean\n  ): Promise<SendUserOperationResult> {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n"]}