{"version":3,"file":"SmartContractWallet.js","sourceRoot":"","sources":["../../src/SmartContractWallet/SmartContractWallet.ts"],"names":[],"mappings":"AAAA,OAAO,EAeL,0BAA0B,GAC3B,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAGtD,OAAO,EACL,SAAS,GAIV,MAAM,IAAI,CAAC;AAEZ,MAAM,OAAO,mBAAmB;IAC9B,IAAI,CAAe;IACnB,SAAS,CAAiC;IAC1C,4BAA4B,CAAsB;IAClD,uBAAuB,CAAsB;IAC7C,YAAY,CAAsB;IAClC,aAAa,CAAsB;IACnC,gBAAgB,CAAmC;IACnD,OAAO,CAAmD;IAC1D,QAAQ,CAAkB;IAC1B,kBAAkB,CAAsC;IACxD,OAAO,CAAsB;IAC7B,UAAU,CAAa;IAEvB,YACE,IAAkB,EAClB,kBAA2C,EAC3C,UAAsB;QAEtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,IAAI,CAAC,QAAQ,GAAG,IAAI,eAAe,CAAC;YAClC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;YAC5B,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB;YAC/C,MAAM,EAAE,UAAU,CAAC,OAAO,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;SAC1E,CAAC,CAAC,OAAO,CACR,CAAC,SAAS,EAAE,EAAE,CACZ,IAAI,0BAA0B,CAAC;YAC7B,KAAK,EAAE,kBAAkB;YACzB,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB;YACpD,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;YACjC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc;YAC9C,SAAS;SACV,CAAC,CACL,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;QACzC,IAAI,CAAC,4BAA4B;YAC/B,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC;QAC7C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC;QACrE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;QAC/C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;QACjD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QACvD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;QAErC,IAAI,CAAC,QAAQ;aACV,UAAU,EAAE;aACZ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;YACX,MAAM,CAAC,CAAC;QACV,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,UAAU,CACR,aAA4B,EAC5B,IAAmB,EACnB,UAAmB;QAEnB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,iBAAiB,CACrB,IAAwD;QAExD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,kBAAkB,CACtB,IAAwD;QAExD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,wBAAwB,CAC5B,EAAyB;QAEzB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,+BAA+B,CACnC,IAAmB;QAEnB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,sBAAsB,CAC1B,IAAmB;QAEnB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,uBAAuB,CACrB,IAAmB;QAEnB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,eAAe,CAAC,OAA8B;QAC5C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,gBAAgB,CAAC,OAAgC;QAC/C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,OAAO,CAAC,IAAoD;QAC1D,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,WAAW,CAAC,GAAwB;QAClC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,aAAa,CAAC,MAA+B;QAC3C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,mBAAmB,CAAC,GAAwB;QAC1C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,qBAAqB,CAAC,MAA2B;QAC/C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,UAAU;QACR,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,uBAAuB,CAAC,SAGvB;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,gBAAgB,CAAC,QAAgC;QAC/C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,iBAAiB,CAAC,QAA2B;QAC3C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,oBAAoB,CAAC,QAA6B;QAChD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,OAAO,CACL,EAEwC;QAExC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,UAAU;QACR,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["import {\n  type SendUserOperationResult,\n  type AccountMiddlewareFn,\n  type BaseSmartContractAccount,\n  type UserOperationCallData,\n  type BatchUserOperationCallData,\n  type UserOperationStruct,\n  type UserOperationResponse,\n  type UserOperationReceipt,\n  type SignTypedDataParams,\n  type PaymasterAndDataMiddleware,\n  type GasEstimatorMiddleware,\n  type FeeDataMiddleware,\n  type PublicErc4337Client,\n  type SimpleSmartAccountOwner,\n  SimpleSmartContractAccount,\n} from \"@alchemy/aa-core\";\nimport { AlchemyProvider } from \"@alchemy/aa-alchemy\";\nimport type { Transport, RpcTransactionRequest, Address } from \"viem\";\nimport type { SignTypedDataParameters } from \"viem/accounts\";\nimport {\n  viemChain,\n  type SnowballAuth,\n  type SnowballSmartWallet,\n  type AAProvider,\n} from \"..\";\n\nexport class SmartContractWallet implements SnowballSmartWallet {\n  auth: SnowballAuth;\n  rpcClient: PublicErc4337Client<Transport>;\n  dummyPaymasterDataMiddleware: AccountMiddlewareFn;\n  paymasterDataMiddleware: AccountMiddlewareFn;\n  gasEstimator: AccountMiddlewareFn;\n  feeDataGetter: AccountMiddlewareFn;\n  customMiddleware?: AccountMiddlewareFn | undefined;\n  account?: BaseSmartContractAccount<Transport> | undefined;\n  provider: AlchemyProvider;\n  simpleAccountOwner: SimpleSmartAccountOwner | undefined;\n  address: Address | undefined;\n  aaProvider: AAProvider;\n\n  constructor(\n    auth: SnowballAuth,\n    simpleAccountOwner: SimpleSmartAccountOwner,\n    aaProvider: AAProvider\n  ) {\n    this.auth = auth;\n    this.simpleAccountOwner = simpleAccountOwner;\n    this.aaProvider = aaProvider;\n\n    this.provider = new AlchemyProvider({\n      chain: viemChain(auth.chain),\n      entryPointAddress: auth.chain.entryPointAddress,\n      apiKey: aaProvider.apiKeys[`alchemyKey-${auth.chain.name.toLowerCase()}`],\n    }).connect(\n      (rpcClient) =>\n        new SimpleSmartContractAccount({\n          owner: simpleAccountOwner,\n          entryPointAddress: this.auth.chain.entryPointAddress,\n          chain: viemChain(this.auth.chain),\n          factoryAddress: this.auth.chain.factoryAddress,\n          rpcClient,\n        })\n    );\n\n    this.rpcClient = this.provider.rpcClient;\n    this.dummyPaymasterDataMiddleware =\n      this.provider.dummyPaymasterDataMiddleware;\n    this.paymasterDataMiddleware = this.provider.paymasterDataMiddleware;\n    this.gasEstimator = this.provider.gasEstimator;\n    this.feeDataGetter = this.provider.feeDataGetter;\n    this.customMiddleware = this.provider.customMiddleware;\n    this.account = this.provider.account;\n\n    this.provider\n      .getAddress()\n      .catch((e) => {\n        throw e;\n      })\n      .then((address) => {\n        this.address = address;\n      });\n  }\n\n  sendUserOp(\n    targetAddress: `0x${string}`,\n    data: `0x${string}`,\n    sponsorGas: Boolean\n  ): Promise<SendUserOperationResult> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async sendUserOperation(\n    data: UserOperationCallData | BatchUserOperationCallData\n  ): Promise<SendUserOperationResult> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async buildUserOperation(\n    data: UserOperationCallData | BatchUserOperationCallData\n  ): Promise<UserOperationStruct> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async buildUserOperationFromTx(\n    tx: RpcTransactionRequest\n  ): Promise<UserOperationStruct> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async waitForUserOperationTransaction(\n    hash: `0x${string}`\n  ): Promise<`0x${string}`> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async getUserOperationByHash(\n    hash: `0x${string}`\n  ): Promise<UserOperationResponse | null> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  getUserOperationReceipt(\n    hash: `0x${string}`\n  ): Promise<UserOperationReceipt | null> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  sendTransaction(request: RpcTransactionRequest): Promise<`0x${string}`> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  sendTransactions(request: RpcTransactionRequest[]): Promise<`0x${string}`> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  request(args: { method: string; params?: any[] | undefined }): Promise<any> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  signMessage(msg: string | Uint8Array): Promise<`0x${string}`> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  signTypedData(params: SignTypedDataParameters): Promise<`0x${string}`> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  signMessageWith6492(msg: string | Uint8Array): Promise<`0x${string}`> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  signTypedDataWith6492(params: SignTypedDataParams): Promise<`0x${string}`> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  getAddress(): Promise<`0x${string}`> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  withPaymasterMiddleware(overrides: {\n    dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware | undefined;\n    paymasterDataMiddleware?: PaymasterAndDataMiddleware | undefined;\n  }): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  withGasEstimator(override: GasEstimatorMiddleware): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  withFeeDataGetter(override: FeeDataMiddleware): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  withCustomMiddleware(override: AccountMiddlewareFn): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  connect(\n    fn: (\n      provider: PublicErc4337Client<Transport>\n    ) => BaseSmartContractAccount<Transport>\n  ): this & { account: BaseSmartContractAccount<Transport> } {\n    throw new Error(\"Method not implemented.\");\n  }\n  disconnect(): this & { account: undefined } {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n"]}