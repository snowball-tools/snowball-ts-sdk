{"version":3,"file":"Snowball.js","sourceRoot":"","sources":["../src/Snowball.ts"],"names":[],"mappings":"AA8BA,MAAM,OAAO,QAAQ;IACZ,IAAI,CAAe;IACnB,WAAW,CAAsB;IAExC,YAAY,WAAgC;QAC1C,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,qBAAqB;QACzB,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,iBAAiB,CACrB,aAAsB,EACtB,IAAS,EACT,UAAmB;QAEnB,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;IACtE,CAAC;CACF","sourcesContent":["import type {\n  SimpleSmartAccountOwner,\n  Address,\n  Hex,\n  ISmartAccountProvider,\n  SendUserOperationResult,\n} from \"@alchemy/aa-core\";\nimport type { Chain } from \"./helpers/chains\";\nimport type { FallbackTransport, Transport } from \"viem\";\nimport type { AuthMethod } from \"@lit-protocol/types\";\n\nexport interface SnowballAuth {\n  chain: Chain;\n  isWebAuthnSupported(): boolean;\n  registerPasskey(username: string): Promise<void>;\n  authenticatePasskey(): Promise<AuthMethod>;\n  getSimpleAccountOwner(): Promise<SimpleSmartAccountOwner>;\n}\n\nexport interface SnowballSmartWallet<\n  TTransport extends Transport | FallbackTransport = Transport\n> extends ISmartAccountProvider<TTransport> {\n  auth: SnowballAuth;\n  sendUserOp(\n    targetAddress: Address,\n    data: Hex,\n    sponsorGas: Boolean\n  ): Promise<SendUserOperationResult>;\n}\n\nexport class Snowball {\n  public auth: SnowballAuth;\n  public smartWallet: SnowballSmartWallet;\n\n  constructor(smartWallet: SnowballSmartWallet) {\n    this.auth = smartWallet.auth;\n    this.smartWallet = smartWallet;\n  }\n\n  async getSmartWalletAddress(): Promise<Address> {\n    return this.smartWallet.getAddress();\n  }\n\n  async sendUserOperation(\n    targetAddress: Address,\n    data: Hex,\n    sponsorGas: Boolean\n  ): Promise<SendUserOperationResult> {\n    return this.smartWallet.sendUserOp(targetAddress, data, sponsorGas);\n  }\n}\n"]}