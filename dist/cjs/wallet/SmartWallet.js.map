{"version":3,"file":"SmartWallet.js","sourceRoot":"","sources":["../../../src/wallet/SmartWallet.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  UserOperationReceipt,\n  UserOperationResponse,\n  type Address,\n  type SignTypedDataParams,\n  type SimpleSmartAccountOwner,\n} from \"@alchemy/aa-core\";\nimport type { TypedDataField } from \"ethers\";\nimport { AlchemySmartWallet } from \"./providers/AlchemySmartWallet\";\nimport type { PKPEthersWallet } from \"@lit-protocol/pkp-ethers\";\nimport type { SnowballAuth, SnowballSmartWallet } from \"../snowball\";\nimport { SmartWalletProvider, type SmartWalletProviderInfo } from \"../helpers\";\nimport type { SnowballSmartWalletProvider } from \"./providers/types\";\n\nexport class SmartWallet implements SnowballSmartWallet {\n  smartWalletProvider: SnowballSmartWalletProvider | undefined;\n  ethersWallet: PKPEthersWallet;\n  auth: SnowballAuth;\n  simpleAccountOwner: SimpleSmartAccountOwner | undefined;\n  address: Address | undefined;\n  smartWalletProviderInfo: SmartWalletProviderInfo;\n\n  constructor(\n    ethersWallet: PKPEthersWallet,\n    auth: SnowballAuth,\n    smartWalletProviderInfo: SmartWalletProviderInfo\n  ) {\n    this.auth = auth;\n    this.smartWalletProviderInfo = smartWalletProviderInfo;\n    this.ethersWallet = ethersWallet;\n  }\n\n  async getSimpleAccountOwner(): Promise<SimpleSmartAccountOwner> {\n    try {\n      const owner: SimpleSmartAccountOwner = {\n        signMessage: async (msg: Uint8Array) => {\n          return (await this.ethersWallet.signMessage(msg)) as Address;\n        },\n        getAddress: async () => {\n          return (await this.ethersWallet.getAddress()) as Address;\n        },\n        signTypedData: async (params: SignTypedDataParams) => {\n          const types: Record<string, Array<TypedDataField>> = {\n            [params.primaryType]: params.types[\"x\"].map(\n              (value) =>\n                ({\n                  name: value.name,\n                  type: value.type,\n                } as TypedDataField)\n            ),\n          };\n\n          return (await this.ethersWallet._signTypedData(\n            params.domain ? params.domain : {},\n            types,\n            params.message\n          )) as Address;\n        },\n      };\n\n      this.simpleAccountOwner = owner;\n\n      return owner;\n    } catch (error) {\n      return Promise.reject(\n        `Get Simple Account Owner failed ${JSON.stringify(error)}`\n      );\n    }\n  }\n\n  async getAddress(): Promise<Address> {\n    if (this.address) {\n      return this.address;\n    }\n\n    try {\n      const owner = this.simpleAccountOwner\n        ? this.simpleAccountOwner\n        : await this.getSimpleAccountOwner();\n      this.address = await owner.getAddress();\n      return this.address;\n    } catch (error) {\n      throw new Error(`Error getting address ${JSON.stringify(error)}`);\n    }\n  }\n\n  async changeChain(): Promise<void> {\n    if (this.smartWalletProvider === undefined) {\n      this.smartWalletProvider = await this.initSmartWalletProvider();\n    }\n\n    try {\n      this.simpleAccountOwner = await this.getSimpleAccountOwner();\n      this.smartWalletProvider.changeChain(this.auth.chain);\n    } catch (error) {\n      return Promise.reject(`changeChain failed ${JSON.stringify(error)}`);\n    }\n  }\n\n  async sendUserOperation(\n    targetAddress: Address,\n    data: Address,\n    sponsorGas: Boolean\n  ): Promise<{\n    hash: string;\n  }> {\n    try {\n      if (this.smartWalletProvider === undefined) {\n        this.smartWalletProvider = await this.initSmartWalletProvider();\n      }\n\n      switch (this.smartWalletProviderInfo.name) {\n        case SmartWalletProvider.alchemy:\n          return await this.smartWalletProvider.sendUserOperation(\n            targetAddress,\n            data,\n            sponsorGas\n          );\n        case SmartWalletProvider.fun:\n        default:\n          throw new Error(\"Auth Provider has not been impl yet\");\n      }\n    } catch (error) {\n      return Promise.reject(\n        `sendUserOperation failed ${JSON.stringify(error)}`\n      );\n    }\n  }\n\n  async initSmartWalletProvider(): Promise<SnowballSmartWalletProvider> {\n    try {\n      if (this.simpleAccountOwner === undefined) {\n        this.simpleAccountOwner = await this.getSimpleAccountOwner();\n      }\n      switch (this.smartWalletProviderInfo.name) {\n        case SmartWalletProvider.alchemy:\n          return new AlchemySmartWallet(\n            this.simpleAccountOwner,\n            this.smartWalletProviderInfo,\n            this.auth.chain\n          );\n        case SmartWalletProvider.fun:\n        default:\n          throw new Error(\"Auth Provider has not been impl yet\");\n      }\n    } catch (error) {\n      return Promise.reject(\n        `initSmartWalletProvider failed ${JSON.stringify(error)}`\n      );\n    }\n  }\n\n  async waitForUserOperationTransaction(\n    hash: `0x${string}`\n  ): Promise<`0x${string}`> {\n    try {\n      if (this.smartWalletProvider === undefined) {\n        this.smartWalletProvider = await this.initSmartWalletProvider();\n      }\n\n      switch (this.smartWalletProviderInfo.name) {\n        case SmartWalletProvider.alchemy:\n          return await this.smartWalletProvider.waitForUserOperationTransaction(\n            hash\n          );\n        case SmartWalletProvider.fun:\n        default:\n          throw new Error(\"Auth Provider has not been impl yet\");\n      }\n    } catch (error) {\n      return Promise.reject(\n        `waitForUserOperationTransaction failed ${JSON.stringify(error)}`\n      );\n    }\n  }\n\n  async getUserOperationByHash(\n    hash: `0x${string}`\n  ): Promise<UserOperationResponse> {\n    try {\n      if (this.smartWalletProvider === undefined) {\n        this.smartWalletProvider = await this.initSmartWalletProvider();\n      }\n\n      switch (this.smartWalletProviderInfo.name) {\n        case SmartWalletProvider.alchemy:\n          return await this.smartWalletProvider.getUserOperationByHash(hash);\n        case SmartWalletProvider.fun:\n        default:\n          throw new Error(\"Auth Provider has not been impl yet\");\n      }\n    } catch (error) {\n      return Promise.reject(\n        `getUserOperationByHash failed ${JSON.stringify(error)}`\n      );\n    }\n  }\n\n  async getUserOperationReceipt(\n    hash: `0x${string}`\n  ): Promise<UserOperationReceipt> {\n    try {\n      if (this.smartWalletProvider === undefined) {\n        this.smartWalletProvider = await this.initSmartWalletProvider();\n      }\n\n      switch (this.smartWalletProviderInfo.name) {\n        case SmartWalletProvider.alchemy:\n          return await this.smartWalletProvider.getUserOperationReceipt(hash);\n        case SmartWalletProvider.fun:\n        default:\n          throw new Error(\"Auth Provider has not been impl yet\");\n      }\n    } catch (error) {\n      return Promise.reject(\n        `getUserOperationByHash failed ${JSON.stringify(error)}`\n      );\n    }\n  }\n}\n"]}