{"version":3,"file":"AlchemySmartWallet.js","sourceRoot":"","sources":["../../../../src/wallet/providers/AlchemySmartWallet.ts"],"names":[],"mappings":";;;AAAA,8CAM0B;AAC1B,mDAA8C;AAC9C,iDAA6D;AAC7D,oDAAsD;AAItD,MAAa,kBAAkB;IAM7B,YACE,kBAA2C,EAC3C,uBAAgD,EAChD,KAAY;QARN;;;;;WAAgC;QAChC;;;;;WAA0B;QAClC;;;;;WAAa;QACb;;;;;WAAiD;QAO/C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACvD,IAAI,CAAC,WAAW;YACd,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAClC,cAAc,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CACrD,CAAC;QAEJ,IAAI,CAAC,QAAQ,GAAG,IAAI,4BAAe,CAAC;YAClC,KAAK,EAAE,IAAA,kBAAS,EAAC,KAAK,CAAC;YACvB,iBAAiB,EAAE,KAAK,CAAC,iBAAiB;YAC1C,MAAM,EACJ,uBAAuB,CAAC,OAAO,CAC7B,cAAc,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CACzC;SACJ,CAAC,CAAC,OAAO,CACR,CAAC,SAAS,EAAE,EAAE,CACZ,IAAI,oCAA0B,CAAC;YAC7B,KAAK,EAAE,kBAAkB;YACzB,iBAAiB,EAAE,KAAK,CAAC,iBAAiB;YAC1C,KAAK,EAAE,IAAA,kBAAS,EAAC,KAAK,CAAC;YACvB,cAAc,EAAE,KAAK,CAAC,cAAc;YACpC,SAAS;SACV,CAAC,CACL,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,iBAAiB,CACrB,aAAsB,EACtB,IAAS,EACT,UAAmB;QAEnB,IAAI;YACF,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,UAAU,EAAE;gBAChD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;oBAClD,QAAQ,EAAE,IAAI,CAAC,WAAW;oBAC1B,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB;iBACzC,CAAC,CAAC;aACJ;YAED,MAAM,MAAM,GACV,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC;gBACpC,MAAM,EAAE,aAAa;gBACrB,IAAI,EAAE,IAAI;aACX,CAAC,CAAC;YAEL,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;gBACrD,OAAO,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;aAC7C;YAGD,MAAM,IAAA,eAAK,EACT,IAAI,CAAC,QAAQ,CAAC,+BAA+B,EAC7C,CAAC,MAAM,CAAC,IAAe,CAAC,EACxB,EAAE,CACH,CAAC;YAEF,IAAI,aAAa,GAAG,MAAM,IAAA,eAAK,EAC7B,IAAI,CAAC,QAAQ,CAAC,uBAAuB,EACrC,CAAC,MAAM,CAAC,IAAe,CAAC,EACxB,EAAE,CACH,CAAC;YAEF,IAAI,aAAa,KAAK,IAAI,EAAE;gBAC1B,OAAO,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;aAC7C;YAED,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,OAAO,CAAC,MAAM,CAAC,sBAAsB,KAAK,EAAE,CAAC,CAAC;SACtD;IACH,CAAC;CACF;AAlFD,gDAkFC","sourcesContent":["import {\n  type Address,\n  type SendUserOperationResult,\n  type Hex,\n  type SimpleSmartAccountOwner,\n  SimpleSmartContractAccount,\n} from \"@alchemy/aa-core\";\nimport { retry } from \"../../helpers/promise\";\nimport { viemChain, type Chain } from \"../../helpers/chains\";\nimport { AlchemyProvider } from \"@alchemy/aa-alchemy\";\nimport type { SmartWalletProviderInfo } from \"../../helpers/constants\";\nimport type { SnowballSmartWalletProvider } from \"./SnowballSmartWalletProvider\";\n\nexport class AlchemySmartWallet implements SnowballSmartWalletProvider {\n  private gasPolicyId: string | undefined;\n  private provider: AlchemyProvider;\n  chain: Chain;\n  smartWalletProviderInfo: SmartWalletProviderInfo;\n\n  constructor(\n    simpleAccountOwner: SimpleSmartAccountOwner,\n    smartWalletProviderInfo: SmartWalletProviderInfo,\n    chain: Chain\n  ) {\n    this.chain = chain;\n    this.smartWalletProviderInfo = smartWalletProviderInfo;\n    this.gasPolicyId =\n      this.smartWalletProviderInfo.apiKeys[\n        `alchemyKey-${chain.name.toLowerCase()}-gasPolicyId`\n      ];\n\n    this.provider = new AlchemyProvider({\n      chain: viemChain(chain),\n      entryPointAddress: chain.entryPointAddress,\n      apiKey:\n        smartWalletProviderInfo.apiKeys[\n          `alchemyKey-${chain.name.toLowerCase()}`\n        ],\n    }).connect(\n      (rpcClient) =>\n        new SimpleSmartContractAccount({\n          owner: simpleAccountOwner,\n          entryPointAddress: chain.entryPointAddress,\n          chain: viemChain(chain),\n          factoryAddress: chain.factoryAddress,\n          rpcClient,\n        })\n    );\n  }\n\n  async sendUserOperation(\n    targetAddress: Address,\n    data: Hex,\n    sponsorGas: Boolean\n  ): Promise<SendUserOperationResult> {\n    try {\n      if (this.gasPolicyId !== undefined && sponsorGas) {\n        this.provider = this.provider.withAlchemyGasManager({\n          policyId: this.gasPolicyId,\n          entryPoint: this.chain.entryPointAddress,\n        });\n      }\n\n      const result: SendUserOperationResult =\n        await this.provider.sendUserOperation({\n          target: targetAddress,\n          data: data,\n        });\n\n      if (result === undefined || result.hash === undefined) {\n        return Promise.reject(\"Transaction failed\");\n      }\n\n      // wait for user op\n      await retry(\n        this.provider.waitForUserOperationTransaction,\n        [result.hash as Address],\n        10\n      );\n\n      let userOpReceipt = await retry(\n        this.provider.getUserOperationReceipt,\n        [result.hash as Address],\n        10\n      );\n\n      if (userOpReceipt === null) {\n        return Promise.reject(\"Transaction failed\");\n      }\n\n      return result;\n    } catch (error) {\n      return Promise.reject(`Transaction failed ${error}`);\n    }\n  }\n}\n"]}