{"version":3,"file":"promise.js","sourceRoot":"","sources":["../../../src/helpers/promise.ts"],"names":[],"mappings":";;;AAAO,KAAK,UAAU,KAAK,CACzB,EAAK,EACL,IAAmB,EACnB,MAAc,EACd,UAAU,GAAG,CAAC;IAEd,MAAM,SAAS,GAAG,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,IAAI;QACF,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;QACjC,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,CAAC,EAAE;QACV,IAAI,SAAS,GAAG,MAAM,EAAE;YACtB,MAAM,CAAC,CAAC;SACT;QACD,OAAO,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;KAC/C;AACH,CAAC;AAhBD,sBAgBC","sourcesContent":["export async function retry<T extends (...arg0: any[]) => any>(\n  fn: T,\n  args: Parameters<T>,\n  maxTry: number,\n  retryCount = 1\n): Promise<Awaited<ReturnType<T>>> {\n  const currRetry = typeof retryCount === \"number\" ? retryCount : 1;\n  try {\n    const result = await fn(...args);\n    return result;\n  } catch (e) {\n    if (currRetry > maxTry) {\n      throw e;\n    }\n    return retry(fn, args, maxTry, currRetry + 1);\n  }\n}\n"]}