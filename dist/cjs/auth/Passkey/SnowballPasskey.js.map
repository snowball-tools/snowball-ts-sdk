{"version":3,"file":"SnowballPasskey.js","sourceRoot":"","sources":["../../../../src/auth/Passkey/SnowballPasskey.ts"],"names":[],"mappings":";;;AACA,qDAAkE;AAElE,2CAAoE;AAEpE,2CAAuE;AAEvE,MAAa,eAAe;IAK1B,YAAY,KAAY,EAAE,gBAAkC;QAJ5D;;;;;WAAa;QACN;;;;;WAAmC;QACnC;;;;;WAAyC;QAG9C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IACpE,CAAC;IAED,mBAAmB;QACjB,OAAO,IAAA,iCAAuB,GAAE,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,QAAgB;QAC7B,IAAI;YACF,QAAQ,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE;gBAClC,KAAK,sBAAY,CAAC,GAAG;oBACnB,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAC9D,KAAK,sBAAY,CAAC,OAAO,CAAC;gBAC1B;oBACE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC9C;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACjC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAChB;IACH,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,IAAI;YACF,QAAQ,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE;gBAClC,KAAK,sBAAY,CAAC,GAAG;oBACnB,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,CAAC;gBAC1D,KAAK,sBAAY,CAAC,OAAO,CAAC;gBAC1B;oBACE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC9C;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACpC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAChB;IACH,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,IAAI;YACF,QAAQ,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE;gBAClC,KAAK,sBAAY,CAAC,GAAG;oBACnB,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;gBACtD,KAAK,sBAAY,CAAC,OAAO,CAAC;gBAC1B;oBACE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC9C;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;YAC3C,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACf,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACzB;IACH,CAAC;IAED,mBAAmB,CAAC,gBAAkC;QACpD,QAAQ,gBAAgB,CAAC,IAAI,EAAE;YAC7B,KAAK,sBAAY,CAAC,GAAG;gBACnB,OAAO,IAAI,sBAAU,CAAC,IAAI,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;YACtD,KAAK,sBAAY,CAAC,OAAO,CAAC;YAC1B;gBACE,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SAC1D;IACH,CAAC;IAED,WAAW,CAAC,KAAY;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC;IACrC,CAAC;CACF;AA3ED,0CA2EC","sourcesContent":["import type { Chain } from \"../../helpers/chains\";\nimport { browserSupportsWebAuthn } from \"@simplewebauthn/browser\";\nimport type { PKPEthersWallet } from \"@lit-protocol/pkp-ethers\";\nimport { AuthProvider, type AuthProviderInfo } from \"../../helpers\";\nimport type { SnowballAuth } from \"../../snowball\";\nimport { LitPasskey, type SnowballPasskeyProvider } from \"./providers\";\n\nexport class SnowballPasskey implements SnowballAuth {\n  chain: Chain;\n  public authProviderInfo: AuthProviderInfo;\n  public passkeyProvider: SnowballPasskeyProvider;\n\n  constructor(chain: Chain, authProviderInfo: AuthProviderInfo) {\n    this.chain = chain;\n    this.authProviderInfo = authProviderInfo;\n    this.passkeyProvider = this.initPasskeyProvider(authProviderInfo);\n  }\n\n  isWebAuthnSupported(): boolean {\n    return browserSupportsWebAuthn();\n  }\n\n  async register(username: string): Promise<void> {\n    try {\n      switch (this.authProviderInfo.name) {\n        case AuthProvider.lit:\n          return await this.passkeyProvider.registerPasskey(username);\n        case AuthProvider.turnkey:\n        default:\n          throw new Error(\"Method not implemented.\");\n      }\n    } catch (e) {\n      console.log(\"Error registering\");\n      console.log(e);\n    }\n  }\n\n  async authenticate(): Promise<void> {\n    try {\n      switch (this.authProviderInfo.name) {\n        case AuthProvider.lit:\n          return await this.passkeyProvider.authenticatePasskey();\n        case AuthProvider.turnkey:\n        default:\n          throw new Error(\"Method not implemented.\");\n      }\n    } catch (e) {\n      console.log(\"Error authenticating\");\n      console.log(e);\n    }\n  }\n\n  async getEthersWallet(): Promise<PKPEthersWallet> {\n    try {\n      switch (this.authProviderInfo.name) {\n        case AuthProvider.lit:\n          return await this.passkeyProvider.getEthersWallet();\n        case AuthProvider.turnkey:\n        default:\n          throw new Error(\"Method not implemented.\");\n      }\n    } catch (e) {\n      console.log(\"Error getting ethers wallet\");\n      console.log(e);\n      throw Promise.reject(e);\n    }\n  }\n\n  initPasskeyProvider(authProviderInfo: AuthProviderInfo) {\n    switch (authProviderInfo.name) {\n      case AuthProvider.lit:\n        return new LitPasskey(this.chain, authProviderInfo);\n      case AuthProvider.turnkey:\n      default:\n        throw new Error(\"Auth Provider has not been impl yet\");\n    }\n  }\n\n  changeChain(chain: Chain) {\n    this.chain = chain;\n    this.passkeyProvider.chain = chain;\n  }\n}\n"]}