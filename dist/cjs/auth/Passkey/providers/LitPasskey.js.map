{"version":3,"file":"LitPasskey.js","sourceRoot":"","sources":["../../../../../src/auth/Passkey/providers/LitPasskey.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitAuthClient, WebAuthnProvider } from \"@lit-protocol/lit-auth-client\";\nimport { LitNodeClient } from \"@lit-protocol/lit-node-client\";\nimport type {\n  AuthMethod,\n  AuthCallbackParams,\n  IRelayPKP,\n  SessionSigsMap,\n  IRelayPollStatusResponse,\n} from \"@lit-protocol/types\";\nimport { PKPEthersWallet } from \"@lit-protocol/pkp-ethers\";\nimport { DEFAULT_EXP, type AuthProviderInfo } from \"../../../helpers/constants\";\nimport type { Chain } from \"../../../helpers/chains\";\nimport { ProviderType } from \"@lit-protocol/constants\";\nimport { LitAbility, LitActionResource } from \"@lit-protocol/auth-helpers\";\nimport type { SnowballPasskeyProvider } from \"./SnowballPasskeyProvider\";\nimport { LIT_RELAY_API_KEY } from \"../../../helpers/env\";\n\nexport class LitPasskey implements SnowballPasskeyProvider {\n  litAuthClient: LitAuthClient;\n  webAuthnProvider: WebAuthnProvider;\n  litNodeClient: LitNodeClient;\n\n  private authenticated: AuthMethod | undefined;\n  private pkpPublicKey: string | undefined;\n  private sessionSig: SessionSigsMap | undefined;\n  private pkpWallet: PKPEthersWallet | undefined;\n\n  chain: Chain;\n  authProviderInfo: AuthProviderInfo;\n\n  constructor(chain: Chain, authProvider: AuthProviderInfo) {\n    this.chain = chain;\n    this.authProviderInfo = authProvider;\n\n    this.litAuthClient = new LitAuthClient({\n      litRelayConfig: {\n        relayApiKey: this.authProviderInfo.apiKeys\n          ? this.authProviderInfo.apiKeys[\"relayKey\"]\n          : LIT_RELAY_API_KEY,\n      },\n    });\n\n    this.litAuthClient.initProvider(ProviderType.WebAuthn);\n\n    this.webAuthnProvider = this.litAuthClient.getProvider(\n      ProviderType.WebAuthn\n    ) as WebAuthnProvider;\n\n    this.litNodeClient = new LitNodeClient({\n      litNetwork: \"serrano\",\n      debug: false,\n    });\n  }\n\n  async registerPasskey(username: string): Promise<void> {\n    try {\n      const options = await this.webAuthnProvider.register(username);\n      const txHash = await this.webAuthnProvider.verifyAndMintPKPThroughRelayer(\n        options\n      );\n      const response: IRelayPollStatusResponse =\n        await this.webAuthnProvider.relay.pollRequestUntilTerminalState(txHash);\n\n      if (response.pkpPublicKey === undefined) {\n        return Promise.reject(\n          `pollRequestUntilTerminalState failed ${response}`\n        );\n      }\n\n      this.pkpPublicKey = response.pkpPublicKey;\n\n      return Promise.resolve();\n    } catch (error) {\n      return Promise.reject(`registerPasskey failed: ${JSON.stringify(error)}`);\n    }\n  }\n\n  async authenticatePasskey(): Promise<void> {\n    try {\n      this.authenticated = await this.webAuthnProvider.authenticate();\n\n      return Promise.resolve();\n    } catch (error) {\n      return Promise.reject(`Authentication failed ${JSON.stringify(error)}`);\n    }\n  }\n\n  async changeChain(chain: Chain): Promise<PKPEthersWallet> {\n    try {\n      this.chain = chain;\n      this.sessionSig = await this.getSessionSigs(true);\n      this.pkpWallet = await this.getEthersWallet();\n\n      return this.pkpWallet;\n    } catch (error) {\n      return Promise.reject(`Changing chain failed ${JSON.stringify(error)}`);\n    }\n  }\n\n  async fetchPkpsForAuthMethod(): Promise<IRelayPKP[]> {\n    try {\n      if (this.authenticated === undefined) {\n        await this.authenticatePasskey();\n      }\n\n      const pkps = await this.webAuthnProvider.fetchPKPsThroughRelayer(\n        this.authenticated!\n      );\n\n      if (pkps.length === 0 || pkps === undefined) {\n        return Promise.reject(\"No PKPs found\");\n      }\n\n      this.pkpPublicKey = pkps[0].publicKey;\n\n      return pkps;\n    } catch (error) {\n      return Promise.reject(`Retrieving PKPs failed ${JSON.stringify(error)}`);\n    }\n  }\n\n  async getSessionSigs(switchChain: boolean = false): Promise<SessionSigsMap> {\n    try {\n      if (this.pkpPublicKey === undefined) {\n        const pkps = await this.fetchPkpsForAuthMethod();\n        this.pkpPublicKey = pkps[0].publicKey;\n      }\n\n      await this.litNodeClient.connect();\n\n      const authNeededCallback = async (params: AuthCallbackParams) => {\n        const resp = await this.litNodeClient.signSessionKey({\n          statement: params.statement,\n          authMethods: [this.authenticated!],\n          pkpPublicKey: this.pkpPublicKey,\n          expiration: params.expiration,\n          resources: params.resources,\n          chainId: this.chain.chainId,\n        });\n        return resp.authSig;\n      };\n\n      this.sessionSig = await this.litNodeClient.getSessionSigs({\n        expiration: DEFAULT_EXP,\n        chain: this.chain.name,\n        resourceAbilityRequests: [\n          {\n            resource: new LitActionResource(\"*\"),\n            ability: LitAbility.PKPSigning,\n          },\n        ],\n        switchChain,\n        authNeededCallback: authNeededCallback,\n      });\n\n      if (this.sessionSig === undefined) {\n        return Promise.reject(\"No session sigs found\");\n      }\n\n      return this.sessionSig!;\n    } catch (error) {\n      return Promise.reject(\n        `Retrieving session sigs failed ${JSON.stringify(error)}`\n      );\n    }\n  }\n\n  async getEthersWallet(): Promise<PKPEthersWallet> {\n    try {\n      if (this.sessionSig === undefined) {\n        this.sessionSig = await this.getSessionSigs();\n      }\n\n      if (this.pkpPublicKey === undefined) {\n        const pkps = await this.fetchPkpsForAuthMethod();\n        this.pkpPublicKey = pkps[0].publicKey;\n      }\n\n      this.pkpWallet = new PKPEthersWallet({\n        controllerSessionSigs: this.sessionSig,\n        pkpPubKey: this.pkpPublicKey,\n        rpc: \"https://chain-rpc.litprotocol.com/http\",\n      });\n      await this.pkpWallet.init();\n\n      return this.pkpWallet;\n    } catch (error) {\n      return Promise.reject(`Transaction failed ${JSON.stringify(error)}`);\n    }\n  }\n}\n"]}